create EC2 with more compute power, add inbound rule to allow all tcp traffic for POC purpose.
install jenkins
	install open jdk
	install jenkins
Open jenkins UI, and install suggested plugins
configure pipeline using git repository where the Jenkins configuraiton file is present.
install Docker
install docker plugin in jenkins

Git:
	git clone "repo"
	update the changes required
	git add .
	git commit -m "updated jenkins file with updated docker hub repo"
	ssh -T git@github.com
	git remote set-url origin git@github.com:iam-kishoret/Jenkins-Zero-To-Hero.git
	git push origin main

insall sonarqube scanner plugin in jenkins and restart jenkins

install sonarqube

create a token from sonarqube for jenkins

add the token created in sonarqube into jenkins

install minikube:
	curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
	sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64

	minikube start --driver=docker
	minikube config set driver docker

install kubectl:

	curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
   	sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

deploy/install: ArgoCD:Operator Lifecycle Manager (OLM)
	https://operatorhub.io/operator/argocd-operator
	minikube start 
	# Wait for some time to initilize
	curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.30.0/install.sh | bash -s v0.30.0
	kubectl create -f https://operatorhub.io/install/argocd-operator.yaml
	kubectl get csv -n operators 
	# This will take some time to initilize, Wait for some
	deploy/install: ArgoCD:Operator
	https://argocd-operator.readthedocs.io/en/latest/usage/basics/
	wget https://github.com/iam-kishoret/Jenkins-Zero-To-Hero/raw/main/java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/argocd-basic.yaml
	kubectl create ns argocd
	kubectl create -n argocd -f argocd-basic.yaml
	kubectl get cm,secret,deploy -n argocd

	#Fetch the admin password from the cluster Secret.
	kubectl -n argocd get secret example-argocd-cluster -o jsonpath='{.data.admin\.password}' | base64 -d

	#Expose and forward port to local ec2 machine
	kubectl -n argocd port-forward service/example-argocd-server 8443:443 --address 0.0.0.0
				(or) - To exit from the command promt.
	nohup kubectl -n argocd port-forward service/example-argocd-server 8443:443 --address 0.0.0.0 &
	# Use the password extracted above to login to the argoCD console using https://<ec2-ip>:8443
	kubectl create ns cicd-app
	kubectl label namespace cicd-app argocd.argoproj.io/managed-by=argocd
	create application via argoCD URL and configure github to use the app manifest files.

	

	
	
	
